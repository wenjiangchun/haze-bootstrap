// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.3/esri/copyright.txt for details.
//>>built
define("require exports ../core/tsSupport/declareExtendsHelper ../core/tsSupport/decorateHelper ../core/accessorSupport/decorators ./Layer ./FeatureLayer ./support/Field ./support/LabelClass ./support/ElevationInfo ./support/labelingInfo ./mixins/SceneService ../PopupTemplate ../request ../core/requireUtils ../core/promiseUtils ../core/Error ../core/Logger ../core/accessorSupport/PropertyOrigin ../core/accessorSupport/utils ../renderers/support/jsonUtils ../renderers/support/styleUtils ../portal/PortalItem ../tasks/support/Query dojo/_base/lang dojo/promise/all".split(" "),
function(w,c,x,f,e,y,n,z,A,B,p,C,q,r,D,h,k,E,l,F,G,H,I,J,K,t){function u(c,d,a){c&&((c=G.read(c,d,a)||void 0)||m.error("Failed to create renderer",{rendererDefinition:c,layer:this,context:a}));return c}var L=["3DObject","Point"],m=E.getLogger("esri.layers.SceneLayer");c=function(c){function d(a,b){a=c.call(this)||this;a.operationalLayerType="ArcGISSceneServiceLayer";a.type="scene";a.fields=[];a.definitionExpression=null;a.elevationInfo=null;a.labelsVisible=!1;a.labelingInfo=null;a.legendEnabled=!0;
a.renderer=null;a.cachedDrawingInfo={color:!1};a.popupEnabled=!0;a.popupTemplate=null;a.objectIdField=null;a.objectIdFilter=null;a._fieldUsageInfo={};return a}x(d,c);d.prototype.normalizeCtorArgs=function(a,b){return"string"===typeof a?K.mixin({},{url:a},b):a};d.prototype.getField=function(a){return this._fieldLookup(this.fields,a)};Object.defineProperty(d.prototype,"geometryType",{get:function(){return M[this.profile]||"mesh"},enumerable:!0,configurable:!0});d.prototype.readLabelsVisible=function(a,
b){return b.showLabels};d.prototype.writeLabelsVisible=function(a,b){a&&(b.showLabels=!0)};d.prototype.readLegendEnabled=function(a,b){return null!=b.showLegend?b.showLegend:!0};d.prototype.writeLegendEnabled=function(a,b){a||(b.showLegend=!1)};d.prototype.readCachedDrawingInfo=function(a,b){if(null==a||"object"!==typeof a)a={};null==a.color&&(a.color=!1);return a};d.prototype.readPopupEnabled=function(a,b){return null!=b.disablePopup?!b.disablePopup:void 0};d.prototype.writePopupEnabled=function(a,
b){a||(b.disablePopup=!0)};d.prototype.readPopupTemplate=function(a,b){return b.popupInfo?q.fromJSON(b.popupInfo):void 0};d.prototype.writePopupTemplate=function(a,b){a&&(b.popupInfo=a.toJSON())};d.prototype.readObjectIdField=function(a,b){!a&&b.fields&&b.fields.some(function(b){"esriFieldTypeOID"===b.type&&(a=b.name);return!!a});return a||void 0};d.prototype.readProfile=function(a,b){a=b.store.profile;if(null!=a&&v[a])return v[a];m.error("Unknown or missing profile",{profile:a,layer:this});return"mesh-pyramids"};
d.prototype.readNormalReferenceFrame=function(a,b){return b.store.normalReferenceFrame};d.prototype.load=function(){var a=this,b=this.loadFromPortal({supportedTypes:["Scene Service"]}).always(function(){return a._fetchService()}).then(function(){return t([a._verifyRootNodeAndUpdateExtent(),a._setCompanionFeatureLayer()])}).then(function(){return a._applyCompanionOverrides()}).then(function(){return a._populateFieldUsageInfo()}).then(function(){return H.loadStyleRenderer(a,{origin:"service"})});this.addResolvingPromise(b);
return this};d.prototype.createLayerView=function(a){var b=this;return D.when(w,null==this.profile||"mesh-pyramids"===this.profile?"../views/3d/layers/SceneLayerView3D":"../views/3d/layers/SceneLayerGraphicsView3D").then(function(g){return new g({view:a,layer:b})})};d.prototype.createQuery=function(){var a=new J;"mesh"!==this.geometryType&&(a.returnGeometry=!0,a.returnZ=!0);a.where=this.definitionExpression||"1\x3d1";a.sqlFormat="standard";return a};d.prototype.queryExtent=function(a){var b=this;
return this._getCompanionLayerForQuery().then(function(g){return g.queryExtent(a||b.createQuery())})};d.prototype.queryFeatureCount=function(a){var b=this;return this._getCompanionLayerForQuery().then(function(g){return g.queryFeatureCount(a||b.createQuery())})};d.prototype.queryFeatures=function(a){var b=this;return this._getCompanionLayerForQuery().then(function(g){return g.queryFeatures(a||b.createQuery())}).then(function(a){if(a&&a.features)for(var c=0,g=a.features;c<g.length;c++)g[c].layer=b;
return a})};d.prototype.queryObjectIds=function(a){var b=this;return this._getCompanionLayerForQuery().then(function(c){return c.queryObjectIds(a||b.createQuery())})};d.prototype.getFieldUsageInfo=function(a){return this._fieldUsageInfo[a]||{supportsLabelingInfo:!1,supportsRenderer:!1,supportsPopupTemplate:!1,supportsLayerQuery:!1}};d.prototype._getCompanionLayerForQuery=function(){var a=this;if(!this.loaded)return this.load().then(function(){return a._getCompanionLayerForQuery()});var b=this.companionFeatureLayer;
return null!=b?h.resolve(b):h.reject(new k("scenelayer:query-not-available","SceneLayer queries are not available without companion feature layer"))};d.prototype._validateLayer=function(a){if(a.layerType&&-1===L.indexOf(a.layerType))throw new k("scenelayer:layer-type-not-supported","SceneLayer does not support this layer type",{layerType:a.layerType});if(isNaN(this.version.major)||isNaN(this.version.minor))throw new k("layer:service-version-not-supported","Service version is not supported.",{serviceVersion:this.version.versionString,
supportedVersions:"1.x"});if(1<this.version.major)throw new k("layer:service-version-too-new","Service version is too new.",{serviceVersion:this.version.versionString,supportedVersions:"1.x"});a=this.normalReferenceFrame;var b=this.spatialReference,c=!1,d=!1;if(null==a)d=c=!0;else switch(b=b&&b.isGeographic,a){case "east-north-up":case "earth-centered":c=!0;d=b;break;case "vertex-reference-frame":c=!0;d=!b;break;default:c=!1}if(!c)throw new k("scenelayer:unsupported-normal-reference-frame","Normal reference frame is invalid.");
if(!d)throw new k("scenelayer:incompatible-normal-reference-frame","Normal reference frame is incompatible with layer spatial reference.");};d.prototype._populateFieldUsageInfo=function(){this._fieldUsageInfo={};if(this.fields)for(var a=function(a){var c=!(!b.attributeStorageInfo||!b.attributeStorageInfo.some(function(b){return b.name===a.name})),d=!!(b.companionFeatureLayer&&b.companionFeatureLayer.fields&&b.companionFeatureLayer.fields.some(function(b){return b&&a.name===b.name}));b._fieldUsageInfo[a.name]=
{supportsLabelingInfo:c,supportsRenderer:c,supportsPopupTemplate:c||d,supportsLayerQuery:d}},b=this,c=0,d=this.fields;c<d.length;c++)a(d[c])};d.prototype._applyCompanionOverrides=function(){if(this.companionFeatureLayer){if(this.companionFeatureLayer.fields)for(var a=0,b=this.companionFeatureLayer.fields;a<b.length;a++){var c=b[a];this.getField(c.name)||this.fields.push(c.clone())}a=["popupTemplate","popupEnabled"];b=F.getProperties(this);for(c=0;c<a.length;c++){var d=a[c];this._buddyIsMoreImportant(d)&&
(b.setDefaultOrigin(this.companionFeatureLayer.originOf(d)),b.set(d,this.companionFeatureLayer[d]),b.setDefaultOrigin("user"))}}};d.prototype._setCompanionFeatureLayer=function(){var a=this;return this._fetchCompanionFeatureLayer().then(function(b){a.companionFeatureLayer=b})};d.prototype._fetchCompanionFeatureLayer=function(){var a=this;return-1===["mesh-pyramids","points"].indexOf(this.profile)?h.resolve(null):(this.portalItem&&this.portalItem.isResolved()?this._fetchCompanionFeatureLayerFromRelatedItems(this.portalItem):
this._fetchCompanionFeatureLayerFromUrl()).then(function(a){return a.load()}).otherwise(function(b){null==a.attributeStorageInfo?m.warn("Companion FeatureLayer could not be loaded and no binary attributes found. Popups will not work for this SceneLayer: "+a.title):m.info("Companion FeatureLayer could not be loaded. Falling back to binary attributes for Popups on this SceneLayer: "+a.title);return null})};d.prototype._fetchCompanionFeatureLayerFromRelatedItems=function(a){var b=this;return a.fetchRelatedItems({relationshipType:"Service2Data",
direction:"forward"}).then(function(a){return(a=a.filter(function(a){return"Feature Service"===a.type})[0])?b._fetchCompanionFeatureLayerFromPortalItem(new I({id:a.id,portal:a.portal})):b._fetchCompanionFeatureLayerFromUrl()}).otherwise(function(){return b._fetchCompanionFeatureLayerFromUrl()})};d.prototype._fetchCompanionFeatureLayerFromPortalItem=function(a){var b=this;return a.load().then(function(a){return b._findMatchingCompanionSublayerUrl(a.url)}).then(function(b){return h.resolve(new n({url:b,
portalItem:a}))})};d.prototype._fetchCompanionFeatureLayerFromUrl=function(){return this._findMatchingCompanionSublayerUrl().then(function(a){return h.resolve(new n({url:a}))})};d.prototype._findMatchingCompanionSublayerUrl=function(a){var b=this.parsedUrl.path.match(/^(.*)\/SceneServer\/layers\/([\d]*)\/?$/i);if(!b)return h.reject();null==a&&(a=b[1]+"/FeatureServer");var c=a.replace(/^(.*FeatureServer)(\/[\d]*\/?)?$/i,"$1");a={query:{f:"json"},responseType:"json"};var d=b[1]+"/SceneServer",e=parseInt(b[2],
10),b=r(this._addUrlToken(d),a).otherwise(function(a){return{layers:null}});a=r(this._addUrlToken(c),a);return t([a,b]).then(function(a){var b=a[0];a=a[1];a=a.data&&a.data.layers;b=b.data&&b.data.layers;if(!Array.isArray(b))throw Error("expected layers array");if(Array.isArray(a))for(var d=0;d<Math.min(a.length,b.length);d++){if(a[d].id===e)return c+"/"+b[d].id}else if(e<b.length)return c+"/"+b[e].id;throw Error("could not find matching companion sublayer");})};d.prototype._buddyIsMoreImportant=function(a){if(!this.companionFeatureLayer)return!1;
var b=l.nameToId(this.originOf(a));a=l.nameToId(this.companionFeatureLayer.originOf(a));return null!=a&&a<=l.OriginId.SERVICE?null==b||b<l.OriginId.SERVICE:null!=a&&a<=l.OriginId.PORTAL_ITEM?null==b||b<l.OriginId.PORTAL_ITEM:!1};d.prototype._fieldLookup=function(a,b){b=b.toLowerCase();for(var c=0;c<a.length;c++){var d=a[c];if(d.name.toLowerCase()===b)return d}return null};return d}(e.declared(y,C));f([e.shared("esri.layers.SceneLayer")],c.prototype,"declaredClass",void 0);f([e.property()],c.prototype,
"companionFeatureLayer",void 0);f([e.property()],c.prototype,"operationalLayerType",void 0);f([e.property({json:{read:!1}})],c.prototype,"type",void 0);f([e.property({type:[z]})],c.prototype,"fields",void 0);f([e.property({readOnly:!0})],c.prototype,"attributeStorageInfo",void 0);f([e.property({json:{read:!1,write:!1}})],c.prototype,"definitionExpression",void 0);f([e.property({type:B,json:{origins:{service:{read:{source:"elevationInfo"},write:{target:"elevationInfo",enabled:!1}}},read:{source:"layerDefinition.elevationInfo"},
write:{target:"layerDefinition.elevationInfo"}}})],c.prototype,"elevationInfo",void 0);f([e.property({type:String,dependsOn:["profile"]})],c.prototype,"geometryType",null);f([e.property({type:Boolean})],c.prototype,"labelsVisible",void 0);f([e.reader("labelsVisible",["showLabels"])],c.prototype,"readLabelsVisible",null);f([e.writer("labelsVisible")],c.prototype,"writeLabelsVisible",null);f([e.property({type:[A],json:{origins:{service:{read:{source:"drawingInfo.labelingInfo",reader:p.reader},write:{target:"drawingInfo.labelingInfo",
enabled:!1}}},read:{source:"layerDefinition.drawingInfo.labelingInfo",reader:p.reader},write:{target:"layerDefinition.drawingInfo.labelingInfo"}}})],c.prototype,"labelingInfo",void 0);f([e.property({type:Boolean})],c.prototype,"legendEnabled",void 0);f([e.reader("legendEnabled",["showLegend"])],c.prototype,"readLegendEnabled",null);f([e.writer("legendEnabled")],c.prototype,"writeLegendEnabled",null);f([e.property({json:{origins:{service:{read:{source:"drawingInfo.renderer",reader:u},write:{target:"drawingInfo.renderer",
enabled:!1}}},read:{source:"layerDefinition.drawingInfo.renderer",reader:u},write:{target:"layerDefinition.drawingInfo.renderer"}}})],c.prototype,"renderer",void 0);f([e.property({json:{read:!1}})],c.prototype,"cachedDrawingInfo",void 0);f([e.reader("service","cachedDrawingInfo")],c.prototype,"readCachedDrawingInfo",null);f([e.property({type:Boolean})],c.prototype,"popupEnabled",void 0);f([e.reader("popupEnabled",["disablePopup"])],c.prototype,"readPopupEnabled",null);f([e.writer("popupEnabled")],
c.prototype,"writePopupEnabled",null);f([e.property({type:q})],c.prototype,"popupTemplate",void 0);f([e.reader("popupTemplate",["popupInfo"])],c.prototype,"readPopupTemplate",null);f([e.writer("popupTemplate")],c.prototype,"writePopupTemplate",null);f([e.property({type:String,json:{read:!1}})],c.prototype,"objectIdField",void 0);f([e.reader("service","objectIdField",["objectIdField","fields"])],c.prototype,"readObjectIdField",null);f([e.property()],c.prototype,"objectIdFilter",void 0);f([e.property({type:String,
json:{read:!1}})],c.prototype,"profile",void 0);f([e.reader("service","profile",["store.profile"])],c.prototype,"readProfile",null);f([e.property({readOnly:!0,type:String,json:{read:!1}})],c.prototype,"normalReferenceFrame",void 0);f([e.reader("service","normalReferenceFrame",["store.normalReferenceFrame"])],c.prototype,"readNormalReferenceFrame",null);c=f([e.subclass()],c);var v={"mesh-pyramids":"mesh-pyramids",meshpyramids:"mesh-pyramids","features-meshes":"mesh-pyramids",points:"points","features-points":"points",
lines:"lines","features-lines":"lines",polygons:"polygons","features-polygons":"polygons"},M={"mesh-pyramids":"mesh",points:"point",lines:"polyline",polygons:"polygon"};return c});